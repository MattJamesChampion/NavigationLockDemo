@page "/NavigationLock"
@using NavigationLockDemo.Helpers

@code {
    [Inject] NavigationManager? NavigationManager { get; set; }
    [Inject] IJSRuntime? JsRuntime { get; set; }
    private bool ConfirmExternalNavigation { get; set; } = true;
    private List<IEnumerable<string>> LogMessageGroups { get; } = new();

    private async Task OnBeforeInternalNavigation(LocationChangingContext locationChangingContext)
    {
        LogMessageGroups.LazyLog($"ConfirmExternalNavigation: {ConfirmExternalNavigation}",
            $"TargetLocation: {locationChangingContext.TargetLocation}",
            $"IsNavigationIntercepted: {locationChangingContext.IsNavigationIntercepted}",
            $"HistoryEntryState: {locationChangingContext.HistoryEntryState}");

        await InvokeAsync(StateHasChanged);

        if (JsRuntime is null) return;
        var continueNavigationEvent = await JsRuntime.InvokeAsync<bool>("confirm", $"{nameof(OnBeforeInternalNavigation)} caught this navigation event! Do you want to continue with your navigation event?");
        if (!continueNavigationEvent) locationChangingContext.PreventNavigation();
    }
}

<NavigationLock ConfirmExternalNavigation="@ConfirmExternalNavigation" OnBeforeInternalNavigation="@OnBeforeInternalNavigation"></NavigationLock>

<PageTitle>Navigation Lock Demo</PageTitle>

<h3>Navigation Lock Demo</h3>

<div class="nav-lock-group">
    <div class="nav-lock-unit">
        <h4>Controls</h4>
        <div>
            <label for="confirm-external-navigation-checkbox">Confirm External Navigation</label>
            <input id="confirm-external-navigation-checkbox" type="checkbox" @bind="@ConfirmExternalNavigation">
        </div>
    </div>
    
    <div class="nav-lock-unit">
        <h4>Internal Site</h4>
        <a href="/OtherInternalPage">A plain ol' link to another internal page</a>
        <button onclick="@(() => NavigationManager?.NavigateTo("/OtherInternalPage", new NavigationOptions { HistoryEntryState = "Other Internal Page State" }))">Navigation.NavigateTo()</button>
    </div>
    
    <div class="nav-lock-unit">
        <h4>External Site (Matt's Blog)</h4>
        <a href="@StaticStrings.BlogUrl">Oh hey, it's my blog</a>
        <button onclick="@(() => NavigationManager?.NavigateTo(StaticStrings.BlogUrl, new NavigationOptions { HistoryEntryState = "Blog State!"}))">
            Navigation.NavigateTo()
        </button>
    </div>
    
</div>

<LazyLogMessagesComponent LogMessageGroups="@LogMessageGroups"></LazyLogMessagesComponent>
